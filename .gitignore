#установка необходимых библиотек (включить при необходимости)
#!pip install numpy soundfile #Для обработки звука
#!apt-get install -y ffmpeg #БПФ

import numpy as np
import soundfile as sf
from IPython.display import Audio, display #подключение библиотек
import matplotlib.pyplot as plt

# Параметры шума
NOISE_FREQ = 2000 # Частота шума в герцах
NOISE_AMP = 0.045    # Громкость шума (0-1)

# 1. Загрузка аудиофайла
data, samplerate = sf.read('input.wav')
if len(data.shape) > 1:
    data = data[:, 0]                   # Брать первый канал если стерео

# 2. Генерация шума
t = np.arange(len(data)) / samplerate                   # Временная шкала
noise = NOISE_AMP * np.sin(2 * np.pi * NOISE_FREQ * t)  # Синусоидальный шум

# 3. Добавление шума к оригинальному сигналу
noisy_data = data + noise

# 4. Сохранение результата
sf.write('noisy.wav', noisy_data, samplerate)

# Спектрограмма 1 чистый сигнал
plt.subplot(2, 1, 1)
plt.specgram(data, Fs=samplerate, NFFT=1024)
plt.title("\nСпектрограмма чистого сигнала\n")
plt.xlabel("Время (сек)")
plt.ylabel("Частота (Гц)")

# Спектрограмма 2 с шумом

plt.specgram(noisy_data, Fs=samplerate, NFFT=1024)
plt.title("\nСпектрограмма сигнала с шумом")
plt.xlabel("Время (сек)\n")
plt.ylabel("Частота (Гц)")

# 5. Воспроизведение аудио
print("Оригинальный звук:")
display(Audio(data=data, rate=samplerate))

print("\nЗвук с добавленным шумом:")
display(Audio(data=noisy_data, rate=samplerate))

print("\nФайл с шумом сохранен как 'noisy.wav'")

(создание помехи)

#установка необходимых библиотек (включить при необходимости)
#!pip install numpy scipy soundfile matplotlib
#!apt-get install -y ffmpeg

# библиотеки
import numpy as np
from scipy.fft import fft, ifft            #преобр фурье
import soundfile as sf
import matplotlib.pyplot as plt
from IPython.display import Audio, display #для спектрограммы

# Параметры фильтрации
NOISE_FREQ = 2000 # Частота шума, который мы добавляли
BANDWIDTH = 10    # Ширина полосы для фильтрации (±50 Гц)

# 1. Загрузка зашумленного файла
data, samplerate = sf.read('noisy.wav')
print('Файл загружен')

# 2. Преобразование Фурье
fft_signal = fft(data)

# 3. Расчет частотной сетки
n = len(data)
freqs = np.fft.fftfreq(n, 1/samplerate)

# 4. Фильтрация шума
# Создаем маску для частот шума
noise_mask = (np.abs(freqs) > NOISE_FREQ - BANDWIDTH) & (np.abs(freqs) < NOISE_FREQ + BANDWIDTH)

# Обнуляем компоненты шума
fft_signal_clean = fft_signal.copy()
fft_signal_clean[noise_mask] = 0

# 5. Обратное преобразование Фурье
filtered_data = np.real(ifft(fft_signal_clean))

# 6. Нормализация сигнала
filtered_data = filtered_data / np.max(np.abs(filtered_data))

# 7. Сохранение результата
sf.write('filtered.wav', filtered_data, samplerate)

# 8. Визуализация
plt.figure(figsize=(20, 20))

#шрифты
plt.rcParams.update({
    'font.size': 14,           # Размер шрифта по умолчанию
    'axes.titlesize': 14,      # Размер заголовков осей
    'axes.labelsize': 14,      # Размер подписей осей
    'xtick.labelsize': 14,     # Размер подписей тиков по X
    'ytick.labelsize': 14,     # Размер подписей тиков по Y
    'legend.fontsize': 14,     # Размер шрифта легенды
})

# Спектр до фильтрации
plt.subplot(3, 1, 1)
plt.plot(freqs[:n//2], np.abs(fft_signal[:n//2]))
plt.title("1")
plt.xlabel("Частота (Гц)")
plt.ylabel("Амплитуда")
plt.axvspan(NOISE_FREQ - BANDWIDTH, NOISE_FREQ + BANDWIDTH, color='red', alpha=0.3)

# Спектр после фильтрации
plt.subplot(3, 1, 2)
plt.plot(freqs[:n//2], np.abs(fft_signal_clean[:n//2]))
plt.title("2")
plt.xlabel("Частота (Гц)")
plt.ylabel("Амплитуда")

# Спектрограмма
plt.subplot(3, 1, 3)
plt.specgram(filtered_data, Fs=samplerate, NFFT=1024)
plt.title("Спектрограмма очищенного сигнала")
plt.xlabel("Время (сек)")
plt.ylabel("Частота (Гц)")

plt.tight_layout()
plt.show()

# 9. Воспроизведение результатов
print("\n Результаты фильтрации:")
print("Оригинал с шумом:")
display(Audio(data=data, rate=samplerate))

print("\очищенный сигнал:")
display(Audio(data=filtered_data, rate=samplerate))

print("\n Файлы сохранены:")
print("- filtered.wav - очищенный аудиофайл")

 Файлы сохранены:
- filtered.wav - очищенный аудиофайл
